unit UMotorista;

interface

uses
   Winapi.Windows, Winapi.Messages, System.SysUtils, System.Variants,
   System.Classes, Vcl.Graphics,
   Vcl.Controls, Vcl.Forms, Vcl.Dialogs, Data.DB, Vcl.Grids, Vcl.DBGrids,
   Vcl.StdCtrls, Vcl.Mask, Vcl.DBCtrls, Vcl.Buttons, Vcl.ExtCtrls,
   FireDAC.Stan.Intf, FireDAC.Stan.Option, FireDAC.Stan.Param,
   FireDAC.Stan.Error, FireDAC.DatS, FireDAC.Phys.Intf, FireDAC.DApt.Intf,
   FireDAC.Stan.Async, FireDAC.DApt, FireDAC.Comp.Client, FireDAC.Comp.DataSet,
   Vcl.Imaging.pngimage;

type
   TfrmMotorista = class(TForm)
      PainelCentral: TPanel;
      qryMotorista: TFDQuery;
      tcMotorista: TFDTransaction;
      qryMotoristaMOTORISTAID: TIntegerField;
      qryMotoristaNOME: TStringField;
      qryMotoristaCIDADE: TStringField;
      qryMotoristaCPF: TStringField;
      gbPesquisaPosto: TGroupBox;
      rbNome: TRadioButton;
      rbCPF: TRadioButton;
      editPesquisaMotorista: TEdit;
      PainelTopo: TPanel;
      painelEsquerdo: TPanel;
      gridMotorista: TDBGrid;
      gbEdits: TGroupBox;
      labelDestino: TLabel;
      Label1: TLabel;
      Label2: TLabel;
      dsMotorista: TDataSource;
      labelTituloEditsNF: TLabel;
      Panel2: TPanel;
      painelBtnNovo: TPanel;
      btnNovo: TSpeedButton;
      PainelCancelar: TPanel;
      btnCancelar: TSpeedButton;
      painelSalvar: TPanel;
      btnSalvar: TSpeedButton;
      PainelExcluir: TPanel;
      btnExcluir: TSpeedButton;
      painelEditar: TPanel;
      btnEditar: TSpeedButton;
      Image1: TImage;
      editNome: TEdit;
      editCPF: TEdit;
      editCidade: TEdit;
      procedure btnNovoClick(Sender: TObject);
      procedure btnCancelarClick(Sender: TObject);
      procedure btnEditarClick(Sender: TObject);
      procedure btnSalvarClick(Sender: TObject);
      procedure btnExcluirClick(Sender: TObject);
      procedure editNomeKeyDown(Sender: TObject; var Key: Word;
        Shift: TShiftState);
      procedure editNomeKeyPress(Sender: TObject; var Key: Char);
      procedure editCidadeKeyDown(Sender: TObject; var Key: Word;
        Shift: TShiftState);
      procedure FormClose(Sender: TObject; var Action: TCloseAction);
      procedure FormShow(Sender: TObject);
      procedure editCidadeKeyPress(Sender: TObject; var Key: Char);
      procedure editCPFKeyDown(Sender: TObject; var Key: Word;
        Shift: TShiftState);
      procedure gridMotoristaDblClick(Sender: TObject);
      procedure gridMotoristaDrawColumnCell(Sender: TObject; const Rect: TRect;
        DataCol: Integer; Column: TColumn; State: TGridDrawState);
      procedure rbCPFClick(Sender: TObject);
      procedure rbNomeClick(Sender: TObject);
      procedure editPesquisaMotoristaChange(Sender: TObject);
      procedure editPesquisaMotoristaKeyDown(Sender: TObject; var Key: Word;
        Shift: TShiftState);
      procedure editPesquisaMotoristaKeyPress(Sender: TObject; var Key: Char);
      procedure dsMotoristaDataChange(Sender: TObject; Field: TField);
   private
      { Private declarations }

      qryObjeto: TFDQuery;

      Procedure configurarEnables(status: Integer);
      procedure procLimparCampos;
      procedure procCommitOrRollback;
      procedure procObjetoOuComponente;

   public
      { Public declarations }
      Procedure CapturarMotorista(qry: TFDQuery);

   var
      Action: string;
   end;

var
   frmMotorista: TfrmMotorista;

implementation

{$R *.dfm}

uses UPrincipalPetrotorque, UVendaPosto, URelatorioMotorista,
   UTransferenciaEstoque, cMotorista, URelatorioVendas;

procedure TfrmMotorista.btnCancelarClick(Sender: TObject);
begin
   configurarEnables(0);
   qryMotorista.Cancel;
   procLimparCampos;
   gridMotorista.Enabled := True;
end;

// verifica se a query utilizada por último foi a criada em memória como objeto da classe TMotorista ou se foi a query componente...
// se for objeto, a procedure pega o registro, passa para a query componente e libera o objeto da memória.
// proc necessária enquanto transição do paradígma atual para a POO....
procedure TfrmMotorista.procObjetoOuComponente;
begin

   if Assigned(qryObjeto) then

   begin
      qryMotorista.Close;
      qryMotorista.Open();

      qryMotorista.Locate('MOTORISTAID',
        dsMotorista.DataSet.FieldByName('MOTORISTAID').AsInteger, []);

      dsMotorista.DataSet := qryMotorista;
      gridMotorista.DataSource := dsMotorista;

      FreeAndNil(qryObjeto);
   end;

end;

procedure TfrmMotorista.btnSalvarClick(Sender: TObject);
var
   erro: String;
   motorista: TMotorista;
   CodigoMotorista: Integer;
begin

   if qryMotorista.State in [dsEdit] then
   begin
      qryMotorista['NOME'] := editNome.Text;
      qryMotorista['CIDADE'] := editCidade.Text;
      qryMotorista['CPF'] := editCPF.Text;
      qryMotorista.Post;
   end
   else
   begin
      try
         motorista := TMotorista.Create(frmMenu.FDconexao);
         motorista.NOME := editNome.Text;
         motorista.CPF := editCPF.Text;
         motorista.CIDADE := editCidade.Text;

         motorista.Inserir(erro, CodigoMotorista);

         if erro <> '' then
         begin
            MessageDlg(erro, TMsgDlgType.mtWarning, [TMsgDlgBtn.mbOK], 0);
            Exit;
         end;

         procCommitOrRollback;

         if Assigned(qryObjeto) then
            FreeAndNil(qryObjeto);

         qryObjeto := motorista.ListarMotoristas(erro);

         if erro <> '' then
         begin
            MessageDlg(erro, TMsgDlgType.mtWarning, [TMsgDlgBtn.mbOK], 0);
            Exit;
         end;

         dsMotorista.DataSet := qryObjeto;
         gridMotorista.DataSource := dsMotorista;

         qryObjeto.Locate('MOTORISTAID', CodigoMotorista, []);

      finally
         FreeAndNil(motorista);
      end;
   end;

   configurarEnables(0);
   gridMotorista.Enabled := True;

end;

procedure TfrmMotorista.btnEditarClick(Sender: TObject);
var
   codigo: Integer;
begin
   procObjetoOuComponente;

   editNome.Text := qryMotorista['NOME'];

   if qryMotorista['CIDADE'] <> null then
      editCidade.Text := qryMotorista['CIDADE'];

   if qryMotorista['CPF'] <> null then
      editCPF.Text := qryMotorista['CPF'];

   configurarEnables(1);
   gridMotorista.Enabled := False;
   qryMotorista.Edit;

end;

procedure TfrmMotorista.btnExcluirClick(Sender: TObject);
var
   AuxErro: string;
   motorista: string;
begin
   procObjetoOuComponente;
   motorista := qryMotoristaNOME.Value;

   configurarEnables(0);
   if Application.MessageBox(Pchar('Deseja excluir o(a) motorista ' + motorista
     + '?'), 'Confirmação', MB_YESNO + MB_ICONQUESTION) = mrYes then
   begin
      try
         qryMotorista.Delete;
      except
         on E: Exception do
         begin
            AuxErro := Copy(E.Message, 20, 500);
            MessageDlg('Não foi possível excluir esse registro. ' + #13 + #13 +
              'Existe pelo menos uma venda cadastrada com esse motorista.  ' +
              #13 + #13 +
              'Em caso de dúvida, informe o erro técnico abaixo ao desenvolvedor: '
              + #13 + 'Erro: ' + #13 + #13 + AuxErro, TMsgDlgType.mtWarning,
              [TMsgDlgBtn.mbOK], 0);
         end;
      end;
   end;
end;

procedure TfrmMotorista.procLimparCampos;
begin
   editCPF.Clear;
   editCidade.Clear;
   editNome.Clear;
end;

procedure TfrmMotorista.btnNovoClick(Sender: TObject);
begin
   if editPesquisaMotorista.Text <> '' then
      editPesquisaMotorista.Clear;

   configurarEnables(1);
   gridMotorista.Enabled := False;
   procLimparCampos;
   editNome.SetFocus;
end;

procedure TfrmMotorista.procCommitOrRollback;
begin
   try
      tcMotorista.CommitRetaining;
   except
      tcMotorista.RollbackRetaining;
   end;
end;

procedure TfrmMotorista.CapturarMotorista(qry: TFDQuery);
begin
   if qry.RecordCount > 0 then

   begin

      if Action = 'venda' then
      begin
         frmVendaPostos.qryMotorista.Refresh;
         frmVendaPostos.editMotorista.Text := qry['NOME'];
         frmVendaPostos.qryMotorista.Locate('motoristaid',
           qryMotorista['MOTORISTAID'], []);
         frmVendaPostos.editTaxaFrete.SetFocus;
         Close;
      end;

      if Action = 'relatoriomotorista' then
      begin
         frmRelatorioMotorista.qryMotorista.Refresh;
         frmRelatorioMotorista.editPesquisaMotorista.Text := qry['NOME'];
         frmRelatorioMotorista.qryMotorista.Locate('motoristaid',
           qryMotorista['MOTORISTAID'], []);
         Close;
      end;

      if Action = 'transferencia' then
      begin
         frmTransferencia.qryMotorista.Refresh;
         frmTransferencia.editMotorista.Text := qry['NOME'];
         frmTransferencia.qryMotorista.Locate('motoristaid',
           qryMotorista['MOTORISTAID'], []);
         Close;
      end;

      if Action = 'relatoriofechamento' then
      begin
         frmRelatorioVenda.qryMotorista.Refresh;
         frmRelatorioVenda.editMotorista.Text := qry['NOME'];
         frmRelatorioVenda.qryMotorista.Locate('motoristaid',
           qryMotorista['MOTORISTAID'], []);
         Close;
      end;
   end;
end;

procedure TfrmMotorista.configurarEnables(status: Integer);
begin
   if status = 0 then
   begin
      btnNovo.Enabled := True;
      btnNovo.Enabled := True;
      btnExcluir.Enabled := True;
      btnCancelar.Enabled := False;
      btnSalvar.Enabled := False;
      editNome.Enabled := False;
      editCidade.Enabled := False;
      editCPF.Enabled := False;
   end
   else
   begin
      btnNovo.Enabled := False;
      btnNovo.Enabled := False;
      btnExcluir.Enabled := False;
      btnCancelar.Enabled := True;
      btnSalvar.Enabled := True;
      editNome.Enabled := True;
      editCidade.Enabled := True;
      editCPF.Enabled := True;
   end;
end;

procedure TfrmMotorista.procEditsExibemNomesSelecionadosNaGrid(qry: TFDQuery);
begin
   if qry.State in [dsEdit] then
      Exit;

   if qryMotorista['NOME'] <> null then
      editNome.Text := qry['NOME']
   else
      editNome.Text := '';

   if qry['CIDADE'] <> null then
      editCidade.Text := qry['CIDADE']
   else
      editCidade.Text := '';

   if qry['CPF'] <> null then
      editCPF.Text := qry['CPF']
   else
      editCPF.Text := '';
end;

procedure TfrmMotorista.dsMotoristaDataChange(Sender: TObject; Field: TField);
begin
   if Assigned(qryObjeto) then
      procEditsExibemNomesSelecionadosNaGrid(qryObjeto)
   else
      procEditsExibemNomesSelecionadosNaGrid(qryMotorista);
end;

procedure TfrmMotorista.editCidadeKeyPress(Sender: TObject; var Key: Char);
begin
   if Key = #13 then
   begin
      editCidade.SetFocus;
      Key := #0;
   end;
end;

procedure TfrmMotorista.editCPFKeyDown(Sender: TObject; var Key: Word;
  Shift: TShiftState);
begin
   if Key = VK_F12 then
      btnSalvar.Click;
end;

procedure TfrmMotorista.editCidadeKeyDown(Sender: TObject; var Key: Word;
  Shift: TShiftState);
begin
   if Key = VK_F12 then
      btnSalvar.Click;
end;

procedure TfrmMotorista.editNomeKeyDown(Sender: TObject; var Key: Word;
  Shift: TShiftState);
begin
   if Key = VK_F12 then
      btnSalvar.Click;
end;

procedure TfrmMotorista.editNomeKeyPress(Sender: TObject; var Key: Char);
begin
   if Key = #13 then
   begin
      editCPF.SetFocus;
      Key := #0;
   end;
end;

procedure TfrmMotorista.editPesquisaMotoristaChange(Sender: TObject);
begin
   if rbCPF.Checked = True then

      with qryMotorista do
      begin
         Close;
         SQL.Clear;
         SQL.Add('select * from motorista where cpf like ' +
           QuotedStr('%' + editPesquisaMotorista.Text + '%') +
           'order by cpf asc');
         Open;
      end;

   if rbNome.Checked = True then

      with qryMotorista do
      begin
         Close;
         SQL.Clear;
         SQL.Add('select * from motorista where nome like ' +
           QuotedStr('%' + editPesquisaMotorista.Text + '%') +
           'order by nome asc');
         Open;
      end;

   if qryMotorista.RecordCount = 0 then
      procLimparCampos;
end;

procedure TfrmMotorista.editPesquisaMotoristaKeyDown(Sender: TObject;
  var Key: Word; Shift: TShiftState);
begin
   if Key = VK_DOWN then
      qryMotorista.Next;
   if Key = VK_UP then
      qryMotorista.Prior;
end;

procedure TfrmMotorista.editPesquisaMotoristaKeyPress(Sender: TObject;
  var Key: Char);
begin
   if Key = #13 then
   begin
      if Assigned(qryObjeto) then
         CapturarMotorista(qryObjeto)
      else
         CapturarMotorista(qryMotorista);
      Key := #0;
   end;
end;

procedure TfrmMotorista.FormClose(Sender: TObject; var Action: TCloseAction);
begin
   qryMotorista.Close;
end;

procedure TfrmMotorista.FormShow(Sender: TObject);
begin
   qryMotorista.Open;
   configurarEnables(0);
   editPesquisaMotorista.SetFocus;

end;

procedure TfrmMotorista.gridMotoristaDblClick(Sender: TObject);
begin
   if Assigned(qryObjeto) then
      CapturarMotorista(qryObjeto)
   else
      CapturarMotorista(qryMotorista)
end;

procedure TfrmMotorista.gridMotoristaDrawColumnCell(Sender: TObject;
  const Rect: TRect; DataCol: Integer; Column: TColumn; State: TGridDrawState);
begin

   // zebrando o dbgrid
   if Odd(gridMotorista.DataSource.DataSet.RecNo) then
      gridMotorista.Canvas.Brush.Color := $00CFCFCF
   else
      gridMotorista.Canvas.Brush.Color := clWhite;

   // mudando a cor da seleção
   if (gdSelected in State) then
   begin
      gridMotorista.Canvas.Brush.Color := $00BC7B50;
      gridMotorista.Canvas.Font.Color := clWhite;
      gridMotorista.Canvas.Font.Style := [fsBold];
   end;

   gridMotorista.Canvas.FillRect(Rect);
   gridMotorista.DefaultDrawColumnCell(Rect, DataCol, Column, State);

   // mudando a posição e alinhamento vertical do texto de cada linha
   // gridPosto.Canvas.TextRect(Rect, Rect.Left + 8, Rect.Top + 8, Column.Field.DisplayText);
end;

procedure TfrmMotorista.rbCPFClick(Sender: TObject);
begin
   editPesquisaMotorista.Clear;
   editPesquisaMotorista.SetFocus;
end;

procedure TfrmMotorista.rbNomeClick(Sender: TObject);
begin
   editPesquisaMotorista.Clear;
   editPesquisaMotorista.SetFocus;
end;

initialization

RegisterClass(TfrmMotorista);

finalization

UnRegisterClass(TfrmMotorista);

end.
